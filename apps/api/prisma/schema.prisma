// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  name           String
  email          String   @unique
  hashedPassword String?
  emailVerified  Boolean  @default(false)
  image          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  accounts Account[]

  organizations Organization[] @relation("UserOrganizations")
  memberOf      Organization[] @relation("OrganizationMembers")

  assignedTasks Task[] @relation("AssignedTasks")
  createdTasks  Task[] @relation("CreatedTasks")
}

enum Providers {
  GOOGLE
  EMAIL
}

model Account {
  id                String    @id @default(uuid())
  provider          Providers
  providerAccountId String
  userId            String
  createdAt         DateTime  @default(now())
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@unique([provider, userId])
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  image     String?
  ownerId   String
  owner     User     @relation("UserOrganizations", fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members  User[]    @relation("OrganizationMembers")
  projects Project[]
}

model Project {
  id             String       @id @default(cuid())
  name           String
  description    String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  tasks          Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
}

enum TaskStatus {
  TODO
  PROGRESS
  REVIEW
  DONE
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String
  status      TaskStatus @default(TODO)
  dueDate     DateTime?
  assignee    User?      @relation("AssignedTasks", fields: [assigneeId], references: [id])
  assigneeId  String?
  createdBy   User       @relation("CreatedTasks", fields: [createdById], references: [id])
  createdById String
  project     Project    @relation(fields: [projectId], references: [id])
  projectId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([projectId])
  @@index([status])
  @@index([assigneeId])
}
